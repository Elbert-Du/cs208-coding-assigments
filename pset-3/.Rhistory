pums_quartiles_laplace = matrix(nrow = num_pums, ncol = 5)
for (i in 1:num_pums) {
temp_vec = vector(mode = "numeric", length = num_trials)
for (j in 1:num_trials) {
temp_vec[j] = sortedReleases[[j]][i,1]
}
pums_quartiles_laplace[i,1] = min(temp_vec)
pums_quartiles_laplace[i,2] = quantile(temp_vec, 0.25)
pums_quartiles_laplace[i,3] = median(temp_vec)
pums_quartiles_laplace[i,4] = quantile(temp_vec, 0.75)
pums_quartiles_laplace[i,5] = max(temp_vec)
}
pums_quartiles_trim = matrix(nrow = num_pums, ncol = 5)
for (i in 1:num_pums) {
temp_vec = vector(mode = "numeric", length = num_trials)
for (j in 1:num_trials) {
temp_vec[j] = sortedReleases[[j]][i,2]
}
pums_quartiles_trim[i,1] = min(temp_vec)
pums_quartiles_trim[i,2] = quantile(temp_vec, 0.25)
pums_quartiles_trim[i,3] = median(temp_vec)
pums_quartiles_trim[i,4] = quantile(temp_vec, 0.75)
pums_quartiles_trim[i,5] = max(temp_vec)
}
par(mfrow=c(1,1))
laplace_df = data.frame(t(pums_quartiles_laplace))
boxplot(laplace_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-50000,150000), range = Inf)
dev.copy2pdf(file="figs/laplace-boxplot.pdf")
trim_df = data.frame(t(pums_quartiles_trim))
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-50000,150000), range = Inf)
dev.copy2pdf(file="figs/trim-boxplot.pdf")
means
means = vector(mode = "numeric", length = num_trials)
for (i in 1:num_trials) {
means[i] = range(releases[[i]][,1])
}
sortedReleases = list()
indices = sort(means, index.return = TRUE)
for (i in 1:num_trials) {
sortedReleases[[i]] = releases[[indices$ix[i]]]
}
pums_quartiles_laplace = matrix(nrow = num_pums, ncol = 5)
for (i in 1:num_pums) {
temp_vec = vector(mode = "numeric", length = num_trials)
for (j in 1:num_trials) {
temp_vec[j] = sortedReleases[[j]][i,1]
}
pums_quartiles_laplace[i,1] = min(temp_vec)
pums_quartiles_laplace[i,2] = quantile(temp_vec, 0.25)
pums_quartiles_laplace[i,3] = median(temp_vec)
pums_quartiles_laplace[i,4] = quantile(temp_vec, 0.75)
pums_quartiles_laplace[i,5] = max(temp_vec)
}
pums_quartiles_trim = matrix(nrow = num_pums, ncol = 5)
for (i in 1:num_pums) {
temp_vec = vector(mode = "numeric", length = num_trials)
for (j in 1:num_trials) {
temp_vec[j] = sortedReleases[[j]][i,2]
}
pums_quartiles_trim[i,1] = min(temp_vec)
pums_quartiles_trim[i,2] = quantile(temp_vec, 0.25)
pums_quartiles_trim[i,3] = median(temp_vec)
pums_quartiles_trim[i,4] = quantile(temp_vec, 0.75)
pums_quartiles_trim[i,5] = max(temp_vec)
}
par(mfrow=c(1,1))
laplace_df = data.frame(t(pums_quartiles_laplace))
boxplot(laplace_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-50000,150000), range = Inf)
dev.copy2pdf(file="figs/laplace-boxplot.pdf")
trim_df = data.frame(t(pums_quartiles_trim))
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-50000,150000), range = Inf)
dev.copy2pdf(file="figs/trim-boxplot.pdf")
par(mfrow=c(1,1))
laplace_df = data.frame(t(pums_quartiles_laplace))
boxplot(laplace_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-50000,150000), range = Inf)
dev.copy2pdf(file="figs/laplace-boxplot.pdf")
trim_df = data.frame(t(pums_quartiles_trim))
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-50000,150000), range = Inf)
dev.copy2pdf(file="figs/trim-boxplot.pdf")
means = vector(mode = "numeric", length = num_trials)
for (i in 1:num_trials) {
means[i] = median(releases[[i]][,1])
}
sortedReleases = list()
indices = sort(means, index.return = TRUE)
for (i in 1:num_trials) {
sortedReleases[[i]] = releases[[indices$ix[i]]]
}
pums_quartiles_laplace = matrix(nrow = num_pums, ncol = 5)
for (i in 1:num_pums) {
temp_vec = vector(mode = "numeric", length = num_trials)
for (j in 1:num_trials) {
temp_vec[j] = sortedReleases[[j]][i,1]
}
pums_quartiles_laplace[i,1] = min(temp_vec)
pums_quartiles_laplace[i,2] = quantile(temp_vec, 0.25)
pums_quartiles_laplace[i,3] = median(temp_vec)
pums_quartiles_laplace[i,4] = quantile(temp_vec, 0.75)
pums_quartiles_laplace[i,5] = max(temp_vec)
}
pums_quartiles_trim = matrix(nrow = num_pums, ncol = 5)
for (i in 1:num_pums) {
temp_vec = vector(mode = "numeric", length = num_trials)
for (j in 1:num_trials) {
temp_vec[j] = sortedReleases[[j]][i,2]
}
pums_quartiles_trim[i,1] = min(temp_vec)
pums_quartiles_trim[i,2] = quantile(temp_vec, 0.25)
pums_quartiles_trim[i,3] = median(temp_vec)
pums_quartiles_trim[i,4] = quantile(temp_vec, 0.75)
pums_quartiles_trim[i,5] = max(temp_vec)
}
par(mfrow=c(1,1))
laplace_df = data.frame(t(pums_quartiles_laplace))
boxplot(laplace_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-50000,150000), range = Inf)
dev.copy2pdf(file="figs/laplace-boxplot.pdf")
trim_df = data.frame(t(pums_quartiles_trim))
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-50000,150000), range = Inf)
dev.copy2pdf(file="figs/trim-boxplot.pdf")
pums_quartiles_trim
sortedReleases
sortedReleases[[1]]
releases[[1]]
median(releases[[1]])
median(sortedReleases[[1]])
dims(sortedReleases[[1]])
dim(sortedReleases[[1]])
pums_list[[1]]
my_data[["100"]]
?sort
puma_means = vector(mode = "numeric", length = num_pums)
for (i in 1:num_pums) {
puma_means[i] = mean(my_data[[toString(pums_list[i])]])
}
sorted_indices = sort(puma_means, index.return = TRUE)
pums_quartiles_laplace = matrix(nrow = num_pums, ncol = 5)
for (i in 1:num_pums) {
temp_vec = vector(mode = "numeric", length = num_trials)
index = sorted_indices[i]
for (j in 1:num_trials) {
temp_vec[j] = releases[[j]][index,1]
}
pums_quartiles_laplace[index,1] = min(temp_vec)
pums_quartiles_laplace[index,2] = quantile(temp_vec, 0.25)
pums_quartiles_laplace[index,3] = median(temp_vec)
pums_quartiles_laplace[index,4] = quantile(temp_vec, 0.75)
pums_quartiles_laplace[index,5] = max(temp_vec)
}
pums_quartiles_trim = matrix(nrow = num_pums, ncol = 5)
for (i in 1:num_pums) {
temp_vec = vector(mode = "numeric", length = num_trials)
index = sorted_indices[i]
for (j in 1:num_trials) {
temp_vec[j] = releases[[j]][index,2]
}
pums_quartiles_trim[index,1] = min(temp_vec)
pums_quartiles_trim[index,2] = quantile(temp_vec, 0.25)
pums_quartiles_trim[index,3] = median(temp_vec)
pums_quartiles_trim[index,4] = quantile(temp_vec, 0.75)
pums_quartiles_trim[index,5] = max(temp_vec)
}
par(mfrow=c(1,1))
laplace_df = data.frame(t(pums_quartiles_laplace))
boxplot(laplace_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-50000,150000), range = Inf)
dev.copy2pdf(file="figs/laplace-boxplot.pdf")
trim_df = data.frame(t(pums_quartiles_trim))
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-50000,150000), range = Inf)
dev.copy2pdf(file="figs/trim-boxplot.pdf")
sorted_indices[1]
puma_means = vector(mode = "numeric", length = num_pums)
for (i in 1:num_pums) {
puma_means[i] = mean(my_data[[toString(pums_list[i])]])
}
sorted_indices = sort(puma_means, index.return = TRUE)
pums_quartiles_laplace = matrix(nrow = num_pums, ncol = 5)
for (i in 1:num_pums) {
temp_vec = vector(mode = "numeric", length = num_trials)
index = sorted_indices$ix[i]
for (j in 1:num_trials) {
temp_vec[j] = releases[[j]][index,1]
}
pums_quartiles_laplace[index,1] = min(temp_vec)
pums_quartiles_laplace[index,2] = quantile(temp_vec, 0.25)
pums_quartiles_laplace[index,3] = median(temp_vec)
pums_quartiles_laplace[index,4] = quantile(temp_vec, 0.75)
pums_quartiles_laplace[index,5] = max(temp_vec)
}
pums_quartiles_trim = matrix(nrow = num_pums, ncol = 5)
for (i in 1:num_pums) {
temp_vec = vector(mode = "numeric", length = num_trials)
index = sorted_indices$ix[i]
for (j in 1:num_trials) {
temp_vec[j] = releases[[j]][index,2]
}
pums_quartiles_trim[index,1] = min(temp_vec)
pums_quartiles_trim[index,2] = quantile(temp_vec, 0.25)
pums_quartiles_trim[index,3] = median(temp_vec)
pums_quartiles_trim[index,4] = quantile(temp_vec, 0.75)
pums_quartiles_trim[index,5] = max(temp_vec)
}
par(mfrow=c(1,1))
laplace_df = data.frame(t(pums_quartiles_laplace))
boxplot(laplace_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-50000,150000), range = Inf)
dev.copy2pdf(file="figs/laplace-boxplot.pdf")
trim_df = data.frame(t(pums_quartiles_trim))
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-50000,150000), range = Inf)
dev.copy2pdf(file="figs/trim-boxplot.pdf")
source('problem 2.R')
?lines
source('problem 2.R')
plot(noise_amounts_optimal, xlab = "k", ylab = "1/epsilon (directly proportional to noise)")
lines(noise_amounts_advanced, col= "red")
lines(noise_amounts_basic, col = "blue")
legend(1, 95, legend=c("optimal", "advanced", "basic"),
col=c("black", "red", "blue"), lty=1:3, cex=0.8)
dev.copy2pdf(file="figs/psiPromises.pdf")
plot(noise_amounts_optimal, xlab = "k", ylab = "1/epsilon (directly proportional to noise)")
lines(noise_amounts_advanced, col= "red")
lines(noise_amounts_basic, col = "blue")
legend(80, 10, legend=c("optimal", "advanced", "basic"),
col=c("black", "red", "blue"), lty=1:3, cex=0.8)
dev.copy2pdf(file="figs/psiPromises.pdf")
plot(noise_amounts_optimal, xlab = "k", ylab = "1/epsilon (directly proportional to noise)")
lines(noise_amounts_advanced, col= "red")
lines(noise_amounts_basic, col = "blue")
legend(80, 20, legend=c("optimal", "advanced", "basic"),
col=c("black", "red", "blue"), lty=1:3, cex=0.8)
dev.copy2pdf(file="figs/psiPromises.pdf")
plot(noise_amounts_optimal, xlab = "k", ylab = "1/epsilon (directly proportional to noise)", type = "l")
lines(noise_amounts_advanced, col= "red")
lines(noise_amounts_basic, col = "blue")
legend(80, 20, legend=c("optimal", "advanced", "basic"),
col=c("black", "red", "blue"), cex=0.8)
dev.copy2pdf(file="figs/psiPromises.pdf")
plot(noise_amounts_optimal, xlab = "k", ylab = "1/epsilon (directly proportional to noise)", type="l")
lines(noise_amounts_advanced, col= "red")
lines(noise_amounts_basic, col = "blue")
legend(80, 20, legend=c("optimal", "advanced", "basic"),
col=c("black", "red", "blue"), lty=1:3, cex=0.8)
dev.copy2pdf(file="figs/psiPromises.pdf")
plot(noise_amounts_optimal, xlab = "k", ylab = "1/epsilon (directly proportional to noise)", type="l")
lines(noise_amounts_advanced, col= "red", type = "dashed")
lines(noise_amounts_basic, col = "blue", type = "dotted")
legend(80, 20, legend=c("optimal", "advanced", "basic"),
col=c("black", "red", "blue"), lty=1:3, cex=0.8)
dev.copy2pdf(file="figs/psiPromises.pdf")
?plot
plot(noise_amounts_optimal, xlab = "k", ylab = "1/epsilon (directly proportional to noise)", type="l")
lines(noise_amounts_advanced, col= "red", lty = 2)
lines(noise_amounts_basic, col = "blue", lty =3)
legend(80, 20, legend=c("optimal", "advanced", "basic"),
col=c("black", "red", "blue"), lty=1:3, cex=0.8)
dev.copy2pdf(file="figs/psiPromises.pdf")
plot(noise_amounts_optimal, name = "noise comparison", xlab = "k", ylab = "1/epsilon (directly proportional to noise)", type="l")
lines(noise_amounts_advanced, col= "red", lty = 2)
lines(noise_amounts_basic, col = "blue", lty =3)
legend(80, 20, legend=c("optimal", "advanced", "basic"),
col=c("black", "red", "blue"), lty=1:3, cex=0.8)
dev.copy2pdf(file="figs/psiPromises.pdf")
plot(noise_amounts_optimal, xlab = "k", ylab = "1/epsilon (directly proportional to noise)", type="l")
lines(noise_amounts_advanced, col= "red", lty = 2)
lines(noise_amounts_basic, col = "blue", lty =3)
legend(80, 20, legend=c("optimal", "advanced", "basic"),
col=c("black", "red", "blue"), lty=1:3, cex=0.8)
title(main = "noise comparison")
dev.copy2pdf(file="figs/psiPromises.pdf")
par(mfrow=c(1,1))
laplace_df = data.frame(t(pums_quartiles_laplace))
boxplot(laplace_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-50000,150000), range = Inf)
title(main = "laplace boxplots by PUMA")
dev.copy2pdf(file="figs/laplace-boxplot.pdf")
trim_df = data.frame(t(pums_quartiles_trim))
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-50000,150000), range = Inf)
title(main = "trimmed boxplots by PUMA")
dev.copy2pdf(file="figs/trim-boxplot.pdf")
source('problem 1-f.R')
boxplot(laplace_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(0,70000), range = Inf)
title(main = "laplace boxplots by PUMA")
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(0,70000), range = Inf)
title(main = "trimmed boxplots by PUMA")
puma_means
sorted_indices
boxplot(laplace_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(10000,60000), range = Inf)
title(main = "laplace boxplots by PUMA")
boxplot(laplace_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(10000,70000), range = Inf)
title(main = "laplace boxplots by PUMA")
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(10000,60000), range = Inf)
title(main = "trimmed boxplots by PUMA")
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(10000,70000), range = Inf)
title(main = "trimmed boxplots by PUMA")
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(10000,70000), range = Inf)
title(main = "trimmed boxplots by PUMA")
boxplot(laplace_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(10000,70000), range = Inf)
title(main = "laplace boxplots by PUMA")
dev.copy2pdf(file="figs/laplace-boxplot.pdf")
trim_df = data.frame(t(pums_quartiles_trim))
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(10000,70000), range = Inf)
title(main = "trimmed boxplots by PUMA")
dev.copy2pdf(file="figs/trim-boxplot.pdf")
boxplot(laplace_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(10000,70000), range = Inf)
title(main = "laplace boxplots by PUMA")
dev.copy2pdf(file="figs/laplace-boxplot.pdf")
trim_df = data.frame(t(pums_quartiles_trim))
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(10000,70000), range = Inf)
title(main = "trimmed boxplots by PUMA")
dev.copy2pdf(file="figs/trim-boxplot.pdf")
puma_means = vector(mode = "numeric", length = num_pums)
for (i in 1:num_pums) {
puma_means[i] = mean(my_data[[toString(pums_list[i])]])
}
sorted_indices = sort(puma_means, index.return = TRUE)
pums_quartiles_laplace = matrix(nrow = num_pums, ncol = 5)
for (i in 1:num_pums) {
temp_vec = vector(mode = "numeric", length = num_trials)
index = sorted_indices$ix[i]
for (j in 1:num_trials) {
temp_vec[j] = releases[[j]][index,1]
}
pums_quartiles_laplace[i,1] = min(temp_vec)
pums_quartiles_laplace[i,2] = quantile(temp_vec, 0.25)
pums_quartiles_laplace[i,3] = median(temp_vec)
pums_quartiles_laplace[i,4] = quantile(temp_vec, 0.75)
pums_quartiles_laplace[i,5] = max(temp_vec)
}
pums_quartiles_trim = matrix(nrow = num_pums, ncol = 5)
for (i in 1:num_pums) {
temp_vec = vector(mode = "numeric", length = num_trials)
index = sorted_indices$ix[i]
for (j in 1:num_trials) {
temp_vec[j] = releases[[j]][index,2]
}
pums_quartiles_trim[i,1] = min(temp_vec)
pums_quartiles_trim[i,2] = quantile(temp_vec, 0.25)
pums_quartiles_trim[i,3] = median(temp_vec)
pums_quartiles_trim[i,4] = quantile(temp_vec, 0.75)
pums_quartiles_trim[i,5] = max(temp_vec)
}
par(mfrow=c(1,1))
laplace_df = data.frame(t(pums_quartiles_laplace))
boxplot(laplace_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(10000,70000), range = Inf)
title(main = "laplace boxplots by PUMA")
dev.copy2pdf(file="figs/laplace-boxplot.pdf")
trim_df = data.frame(t(pums_quartiles_trim))
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(10000,70000), range = Inf)
title(main = "trimmed boxplots by PUMA")
dev.copy2pdf(file="figs/trim-boxplot.pdf")
noise_amounts_advanced
noise_amounts_advanced - noise_amounts_basic
(noise_amounts_advanced - noise_amounts_basic)[41]
(noise_amounts_optimal - noise_amounts_basic)[41]
(noise_amounts_optimal - noise_amounts_basic)
(noise_amounts_optimal - noise_amounts_basic)[17]
(noise_amounts_optimal - noise_amounts_basic)[16]
source('problem 1-d.R')
temp
quantile(x, .05)
?rep
source('problem 3.R')
15*100*16
output <- out.1
syn.prob <- as.vector(normalize(out$release))
syn.xyz <- rmultinom(n=myn, prob=syn.prob, size=1)
syn.x <- t(syn.xyz) %*% sort(rep(out$xcodebook, nrow(out$release)))
syn.y <- t(syn.xyz) %*% rep(out$ycodebook, ncol(out$release))
syn.z <- t(syn.xyz) %*% rep(out$zcodebook, ncol(out$release))
syn.prob <- as.vector(normalize(output$release))
syn.xyz <- rmultinom(n=myn, prob=syn.prob, size=1)
syn.x <- t(syn.xyz) %*% sort(rep(out$xcodebook, nrow(out$release)))
syn.y <- t(syn.xyz) %*% rep(out$ycodebook, ncol(out$release))
syn.z <- t(syn.xyz) %*% rep(out$zcodebook, ncol(out$release))
nsims <- 20
myn<-1000
syn.prob <- as.vector(normalize(output$release))
syn.xyz <- rmultinom(n=myn, prob=syn.prob, size=1)
syn.x <- t(syn.xyz) %*% sort(rep(out$xcodebook, nrow(out$release)))
syn.y <- t(syn.xyz) %*% rep(out$ycodebook, ncol(out$release))
syn.z <- t(syn.xyz) %*% rep(out$zcodebook, ncol(out$release))
syn.prob <- as.vector(normalize(output$release))
syn.xyz <- rmultinom(n=myn, prob=syn.prob, size=1)
syn.x <- t(syn.xyz) %*% sort(rep(output$xcodebook, nrow(output$release)))
syn.y <- t(syn.xyz) %*% rep(output$ycodebook, ncol(output$release))
syn.z <- t(syn.xyz) %*% rep(output$zcodebook, ncol(output$release))
sort(rep(output$xcodebook, nrow(output$release)))
rep(output$ycodebook, ncol(output$release))
syn.xyz
dim(sin.xyz)
dim(syn.xyz)
?rmultinom
t(syn.xyz) * sort(rep(output$xcodebook, nrow(output$release)))
syn.x <- t(syn.xyz) * sort(rep(output$xcodebook, nrow(output$release)))
syn.x
syn.x[,1]
syn.x[1,]
syn.x[950]
syn.x[950,]
which(zyn.x)
which(syn.x)
which(syn.x[1,])
which(syn.x != 0)
which(syn.x[23675287])
syn.x[23675287]
syn.x[70553]
syn.x <- t(syn.xyz) %*% sort(rep(output$xcodebook, nrow(output$release)))
?'%*%'
dim(syn.xyz)
dim(rep(output$xcodebook, nrow(output$release)))
rep(output$xcodebook, nrow(output$release))
output$xcodebook
output$release
nrow(output$release)
dim(output$release)
source('C:/Users/Elbert/cs 208/cs208/examples/wk5_centralized/histogramReleaseFull.r', echo=TRUE)
setwd('C:/Users/Elbert/cs 208/cs208/examples')
setwd('wk5_centralized')
source('histogramReleaseFull.R')
install.packages(plotrix)
install.packages('plotrix')
source('histogramReleaseFull.R')
nrow(out.4$release)
dim(syn.xy)
dim(rep(out.4$xcodebook, nrow(out.4$release)))
rep(out.4$xcodebook, nrow(out.4$release))
?rep
out.4$release
out4$xcodebook
out.4$xcodebook
nrow(out.4$release)
?array
xarray <- array(dim = c(dim(output$release)[3],dim(output$release)[2],dim(output$release)[1]))
output
source('problem 3.R')
setwd('C:/Users/Elbert/cs 208/cs208-coding/assignments/pset-3')
setwd('C:/Users/Elbert/cs 208/cs208-coding-assignments/pset-3')
source('problem 3.R')
dim(output$release[3])
source('problem 3.R')
?lapply
?as.vector
array(dim = c(100,200,100))
a = array(dim = c(100,200,100))
length(as.vector(a))
source('problem 3.R')
warnings()
good_history[1]
goodhistory[1]
true.output
goodhistory[2]
goodhistory[3]
goodhistory[4]
goodhistory[5]
goodhistory[6]
goodhistory[7]
goodhistory[8]
goodhistory[9]
goodhistory[10]
goodhistory[11]
x.slope <- true.output$data.x
z.slope <- true.output$data.z
x.slope
true.output
true.output$coefficients
true.output$coefficients$data.x
true.output$coefficients[1]
true.output$coefficients[2]
goodhistory[1]
goodhistory[[1]][1]
true.intercept <- true.output$coefficients[1]
true.x.slope <- true.output$coefficients[2]
true.z.slope <- true.output$coefficients[3]
intercepts = vector(mode = "numeric", length = nsims)
x.slopes = vector(mode = "numeric", length = nsims)
z.slopes = vector(mode = "numeric", length = nsims)
for (i in 1:nsims) {
intercepts[i] = goodhistory[[i]][1]
x.slopes[i] = goodhistory[[i]][2]
z.slopes[i] = goodhistory[[i]][3]
}
intercept.bias = mean(intercepts) - true.intercept
x.slope.bias = mean(x.slopes) - true.x.slope
z.slope.bias = mean(z.slopes) - true.z.slope
intercept.variance = variance(intercepts)
x.slope.variance = variance(x.slopes)
z.slope.variance = variance(z.slopes)
intercept.variance = var(intercepts)
x.slope.variance = var(x.slopes)
z.slope.variance = var(z.slopes)
intercept.bias
x.slope.bias
z.slope.bias
intercept.variance
x.slope.variance
z.slope.variance
(intercept.bias)^2 + intercept.variance
sqrt((intercept.bias)^2 + intercept.variance)
sqrt((x.slope.bias)^2+x.slope.variance)
sqrt((z.slope.bias)^2+z.slope.variance)
source('problem 3 bootstrap.R')
model()
model
bootstrap_intercepts
my_data[[1]]
my_data[[x]]
data.x
my_data = bootstrap(data.x, data.y, data.z, 100)
my_data
source("problem 3 bootstrap.R")
MSE_intercept = mean(bootstrap_intercepts^2-true.intercept^2)
MSE_x_slope = mean(bootstrap_x_slopes^2-true.x.slope^2)
MSE_z_slope = mean(bootstrap_z_slopes^2-true.z.slope^2)
MSE_intercept
MSE_x_slope
MSE_z_slope

a = matrix(nrow =3, ncol = 3)
b = matrix(nrow =3, ncol = 3)
a[1][1] = 3
a[1][2] = 4
a[1,2] = 4
a[1,3] = 2
a
a[2,1] = 5
a[2,2] = 6
a[2,3] = 4
a[3,3] = 4
a[3,1] = 4
a[3,2] = 3
a
b[1,1] = 1
b[1,2] = 4
b[1,3] = 2
b[2,1] = 1
b[2,2] = 9
b[2,3] = 3
b[3,3] = 3
b[3,2] = 3
b[3,1] = 2
b
a*b
int(2.0)
integer(2.3)
integer(2.0)
as.integer(2.3)
as.integer(2.6)
round(2.6)
?round
getwd()
setwd("C:/User/Elbert/cs 208/cs208-coding-assignments/pset 1"
)
setwd("C:/User/Elbert/cs 208/cs208-coding-assignments/pset 1")
setwd("C:/User/Elbert/cs 208")
install.packages("IRKernel")
install.packages("IRkernel")
IRkernel::installspec()
?rpoisson
?poisson
?rpois
?lap
?laplace
?rlap
?rlaplalce
?rlaplace
install.packages(rmutil)
install.packages('rmutil')
usepackages('rmutil')
library(rmutil)
?rlaplace
getwd()
setwd("C:/User/Elbert/cs 208/cs208-coding-assignments/pset-2")
setwd("C:/Users/Elbert/cs 208/cs208-coding-assignments/pset-2")
source('problem-2.R')
length(x)
source('problem-2.R')
my_release
mean(x)
source('problem-2.R')
my_release
x
source('problem-2.R')
x
my_release
mean(x)
source('problem-2.R')
mean(x)
my_release
noise
rlaplace(n=1, m=0, s=GS/epsilon)
rlaplace(n=1, m=0, s=GS/eps)
rlaplace(n=1, m=0, s=GS/eps)
rlaplace(n=1, m=0, s=GS/eps)
rlaplace(n=1, m=0, s=GS/eps)
rlaplace(n=1, m=0, s=GS/(num_pulls*eps))
rlaplace(n=1, m=0, s=GS/(num_pulls*eps))
rlaplace(n=1, m=0, s=GS/(num_pulls*eps))
rlaplace(n=1, m=0, s=GS/(num_pulls*eps))
rlaplace(n=1, m=0, s=GS/(num_pulls*eps))
source('problem-2.R')
my_release
mean(x)
source('problem-2.R')
source('problem-2.R')
print(errors)
MSE
source('problem-2.R')
source('problem-2.R')
?rnorm
source('problem-3.R')
diff_y
diff_x
Sxx
source('problem-3.R')
Sxx
Sxy
source('problem-3.R')
source('problem-3.R')
a
b
source('problem-3.R')
a
b
source('problem-3.R')
source('problem-3.R')
a
b
source('problem-3.R')
a
b
?rexp
?vector
source('problem-2.R')
x
source('problem-2.R')
opt
?rpois
source('problem-2.R')
opt
x
source('problem-3.R')
source('problem-3.R')
a
noisy_mean_y
noisy_mean_x
source('problem-3.R')
a
source('problem-3.R')
a
source('problem-3.R')
a
source('problem-3.R')
a
source('problem-3.R')
a
source('problem-3.R')
a
source('problem-3.R')
a
source('problem-3.R')
a
1/3
x <- rpois(n = num_pulls, lambda = 10)
GS <- max(sample(x), 10, replace = FALSE)
GS
x <- rpois(n = num_pulls, lambda = 10)
GS <- max(sample(x), 10, replace = FALSE)
GS
x <- rpois(n = num_pulls, lambda = 10)
GS <- max(sample(x), 10, replace = FALSE)
GS
x <- rpois(n = num_pulls, lambda = 10)
GS <- max(sample(x), 10, replace = FALSE)
GS
x <- rpois(n = num_pulls, lambda = 10)
GS <- max(sample(x), 10, replace = FALSE)
GS
source('problem-3.R')
a
b
source("problem-3.R")
a
b
noisy_mean_x
noisy_mean_y
source("problem-3.R")
simple_model
simple_model.coef
simple_model.coef()
?lm
simple_model.coefficients
simple_model$coefficients
simple_model$coefficients[1]
source("problem-3.R")
a
b
a1
b1
source("problem-3.R")
?lines
source("problem-3.R")
source("problem-3.R")
private_noise
source("problem-3.R")
private_noise
non_private_noise
a
b
a1
b1
dev.copy2pdf(file="error-plot.pdf")
dev.copy2pdf(file="linreg-plot.pdf")
source("problem-2.R")
source("problem-3.R")
source("problem-3.R")
source("problem-3.R")
source("problem-3.R")
?hist
?hist
source("problem-3.R")
source("problem-3.R")
source("problem-3.R")
source("problem-3.R")
?matrix
?list
?3dmatrix
?array
?vector
(1,2,3)
c(1,2,3)
source('problem-3.$')
source('problem-3.R')
l
if (20 <= l && l <= 30) {
my_epsilons = c(my_epsilons, c(i,j,k,l))
}
my_epsilons
source('problem-3.R')
i
j
k
l
source('problem-3.R')
l
20 <= l && l <= 30
epsilon_1
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
Sxy = sum((x-mean(x))*(y-mean(y))) + rlaplace(n=1, m=0, s=(1-1/num_pulls)/epsilon_2)
x-mean(x)
sum((x-mean(x))*(y-mean(y)))
rlaplace(n=1, m=0, s=(1-1/num_pulls)/epsilon_2)
epsilon_2
my_epsilons[1]
?append
my_epsilons = list()
for (i in 20:30) {
for (j in 20:30) {
for (k in 20:30) {
l = 100 - i - j - k
if (20 <= l && l <= 30) {
my_epsilons[[length(my_epsilons)+1]] <- list(c(i,j,k,l))
}
}
}
}
my_epsilons[1]
my_epsilons[[1]]
my_epsilons[[1]][1]
for (epsilons in my_epsilons) {
print(epsilon)
}
for (epsilons in my_epsilons) {
print(epsilons)
}
epsilons[[1]]
epsilons[[1]][1]
source("problem-3.R")
source("problem-3.R")
mean_private_MSEs
o = which.min(mean_private_MSEs)
o = which.min(mean_private_MSEs - mean_non_private_MSEs)
o
(mean_private_MSEs - mean_non_private_MSEs)[224]
epsilons[224]
epsilons[[224]]
my_epsilons[[224]]
(mean_private_MSEs - mean_non_private_MSEs)[2]
(mean_private_MSEs - mean_non_private_MSEs)[3]
(mean_private_MSEs - mean_non_private_MSEs)[5]
source('problem-3.R')
source('problem-3.R')
o
my_epsilons[[95]]
which(my_epsilons == c(0.25, 0.25, 0.25, 0.25))
?which
my_epsilons == c(0.25)
mean_private_MSEs - mean_non_private_MSEs[o]
print (mean_private_MSEs - mean_non_private_MSEs)[[o]]
print(mean_private_MSEs - mean_non_private_MSEs)[[o]]
print((mean_private_MSEs - mean_non_private_MSEs)[[o]])
o
my_epsilons[[o]]
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
my_epsilons[[o]]
(mean_private_MSEs - mean_non_private_MSEs)[[5]]
o
(mean_private_MSEs - mean_non_private_MSEs)[[3]]
(mean_private_MSEs - mean_non_private_MSEs)[[100]]
source("problem-2.R")
opt
errors
source('problem-2.R')
opt
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
x
gs
GS
x <- rpois(n = num_pulls, lambda = 10)
sample(x, 10, replace = FALSE)
max(x)
sample(x)
GS*1.5
qpois(0.1)
?qpois
qpois(0.1, 10)
qpois(0.9, 10)
qpois(0.999, 10)
qpois(0.99, 10)
qpois(0.9999, 10)
qpois(0.99999, 10)
qpois(0.999999, 10)
qpois(0.9999999, 10)
qnorm(0.9, 0, 1)
qnorm(0.999, 0, 1)
?qnorm
?qpois
mean(x)
source('problem-3.R')
source('problem-3.R')
b
y
y_min_est
y_max_est
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
GS
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
1 ||
2
0 || 0
0 || 1
min(non_private_MSEs)
which.min(non_private_MSEs)
which.min(private_MSEs)
source('problem-3.R')
which.min(private_MSEs)
Sxx
Sxy
source('problem-3.R')
which.min(private_MSEs)
source('problem-3.R')
length(non_private_MSEs)
print(non_private_MSEs[1])
print(non_private_MSEs[2])
print(non_private_MSEs[3])
print(non_private_MSEs[4])
print(non_private_MSEs[101])
print(non_private_MSEs[102])
print(non_private_MSEs[103])
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
length(private_MSEs)
source('problem-3.R')
source('problem-3.R')
source('problem-3.R')
opt
my_epsilons_opt
my_epsilons[opt]

getwd()
source("local_DP_SQ.R")
data
data$targetted
length(data)
source("local_DP_SQ.R")
source("local_DP_SQ.R")
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("central_DP_SQ.R")
b
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("central_DP_SQ.R")
b
source("central_DP_SQ.R")
b
source("central_DP_SQ.R")
b
source("central_DP_SQ.R")
b
source("central_DP_SQ.R")
b
source("central_DP_SQ.R")
b
n
length(data)
dim(data)
source("central_DP_SQ.R")
b
source("local_DP_SQ.R")
DP_data = localBinaryData(data, num_attributes = d+1, epsilon = epsilon)
y_data = DP_data[,d+1]
x_data = DP_data[,1:d]
dim(x_data)
dim(y_data)
DP_data = localBinaryData(data, num_attributes = d+1, epsilon = epsilon)
y_data = DP_data[1:n,d+1]
x_data = DP_data[1:n,1:d]
n = dim(data)[1]
DP_data = localBinaryData(data, num_attributes = d+1, epsilon = epsilon)
y_data = DP_data[1:n,d+1]
x_data = DP_data[1:n,1:d]
DP_data[1:n,]
DP_data[1,]
DP_data[n,]
DP_data[,n]
dim(DP_data)
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
DP_data
n = dim(data)[1]
DP_data = localBinaryData(data, num_attributes = d+1, epsilon = epsilon)
y_data = DP_data[1:n,d+1]
x_data = DP_data[1:n,1:d]
dim(DP_data)
n
DP_data = localBinaryData(data, num_attributes = d+1, epsilon = epsilon)
DP_data
y_data = DP_data[1:n,d+1]
x_data = DP_data[1:n,1:d]
x_data
DP_data
source("local_DP_SQ")
source("local_DP_SQ.R")
a
?lapply
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a
source("local_DP_SQ.R")
a$indices
a
a$indices
source("local_DP_SQ.R")
a$indices
a
source("central_DP_SQ.R")
probs
probs = lapply(1:d, compute_probs, n, x_data, y_data)
probs
probs[3]
probs = as.vector(lapply(1:d, compute_probs, n, x_data, y_data))
probs
probs = sapply(1:d, compute_probs, n, x_data, y_data)
probs
source("local_DP_SQ.R")
a$indices
a$full_vector
source("central_DP_SQ.R")
b
source("central_DP_SQ.R")
b
6.177792e-02
source("central_DP_SQ.R")
b
source("local_DP_SQ.R")
a
data$sex
a
length(a$full_vector)
length(data)
source("local_DP_SQ.R")
data$sex
?matrix
n
num_attributes
DPrelease = matrix(nrow = n, ncol = num_attributes-1)
DP_data = localBinaryData(data, num_attributes = d+1, epsilon = epsilon)
DP_data = localBinaryData(data, num_attributes = d+1, epsilon = epsilon)
for(i in 1:n){
for (j in 1:num_attributes-1) {
temp_value <- (x[i,j] == 0 && x[i,num_attributes] == 1)
DPrelease[i,j] <- localRelease(temp_value, epsilon=epsilon/(num_attributes-1))
}
}
x = data
n <- dim(x)[1]
DPrelease = matrix(nrow = n, ncol = num_attributes-1)
for(i in 1:n){
for (j in 1:num_attributes-1) {
temp_value <- (x[i,j] == 0 && x[i,num_attributes] == 1)
DPrelease[i,j] <- localRelease(temp_value, epsilon=epsilon/(num_attributes-1))
}
}
dim(x)
num_attributes
x[1234,10]
x[1234,10] == 0
x[1234,12] == 0
n
source("local_DP_SQ.R")
DP_data
probs = sapply(1:d, compute_probs, n, DP_data)
dim(DP_data)
d
n
DP_data = localBinaryData(data, num_attributes = d, epsilon = epsilon)
probs = sapply(1:d, compute_probs, n, DP_data)
probs
source("central_DP_SQ.R")
b
list(data)
data[[1]]
names(data)
b
a
probs
?sample
data[1,]
?list
source("local_DP_SQ.R")
bootstrap_results
?vector
source("local_DP_SQ.R")
?matrix
source("local_DP_SQ.R")
bootstrap_results = as.list(matrix(nrow = num_tests, ncol = num_trials))
bootstrap_results
bootstrap_results = matrix(nrow = num_tests, ncol = num_trials)
bootstrap_results
?list
?data.frame
data.frame(bootstrap_results)
source("local_DP_SQ.R")
bootstrap_results
bootstrap_results[1]
bootstrap_results[1,2]
source("local_DP_SQ.R")
warnings()
source("local_DP_SQ.R")
bootstrap_results
?qnorm
qnorm(0.1^(1/d), mean = (n/(1+exp(epsilon/d))), sd = sqrt(ne^(epsilon/d)/(1+exp(epsilon/d))^2))
qnorm(0.1^(1/d), mean = (n/(1+exp(epsilon/d))), sd = sqrt(n*exp(epsilon/d)/(1+exp(epsilon/d))^2))
qnorm(0.1^(1/d), mean = (n/(1+exp(epsilon/d))), sd = sqrt(n*exp(epsilon/d)/(1+exp(epsilon/d))^2))/n
n = 1000
qnorm(0.1^(1/d), mean = (n/(1+exp(epsilon/d))), sd = sqrt(n*exp(epsilon/d)/(1+exp(epsilon/d))^2))/n
source("local_DP_SQ.R")
bootstrap_results
bootstrap_results[[1]]
bootstrap_results[[1]][[1]]
bootstrap_results[[1]]
bootstrap_results = list()
for(i in 1:num_tests) {
bootstrap_results[[i]] = list()
for (j in 1:num_trials) {
n = ns_to_test[i]
bootstrap_indices = sample(1:dim(data)[1], n, replace = TRUE)
bootstrap_data = data[bootstrap_indices,]
bootstrap_results[i] = c(bootstrap_results[i], SQ_algorithm(bootstrap_data, d, epsilon, t*n/dim(data)[1])$indices)
#We have to adjust t to match the value of n we're testing and n only appears in the denominator
}
}
bootstrap_results
source("local_DP_SQ.R")
bootstrap_results
source("local_DP_SQ.R")
bootstrap_results
bootstrap_results[[1]][[1]]
1 in bootstrap_results[[1]][[1]]
1 %in% bootstrap_results[[1]][[1]]
1 not %in% bootstrap_results[[1]][[1]]
1 %notin% bootstrap_results[[1]][[1]]
1-(1 %in% bootstrap_results[[1]][[1]])
target_indices = c(6,8,10)
target_indices %in% bootstrap_results[[1]][[1]]
3 - sum(target_indices %in% bootstrap_results[[1]][[1]])
bootstrap_false_negative = vector(mode = "numeric", length = num_tests)
bootstrap_false_positive = vector(mode = "numeric", length = num_tests)
for (i in 1:num_tests) {
num_false_negative = 0
num_false_positive = 0
for (j in 1:num_trials) {
num_false_negative = 3 - sum(target_indices %in% bootstrap_results[[i]][[j]])
num_false_positive = length(bootstrap_results[[i]][[j]])-num_false_negative+3
}
bootstrap_false_negative[i] = num_false_negative
bootstrap_false_positive[i] = num_false_positive
}
bootstrap_false_negative
bootstrap_false_positive
bootstrap_false_negative = vector(mode = "numeric", length = num_tests)
bootstrap_false_positive = vector(mode = "numeric", length = num_tests)
for (i in 1:num_tests) {
num_false_negative = 0
num_false_positive = 0
for (j in 1:num_trials) {
num_false_negative = 3 - sum(target_indices %in% bootstrap_results[[i]][[j]])
num_false_positive = length(bootstrap_results[[i]][[j]])-num_false_negative+3
}
bootstrap_false_negative[i] = bootstrap_false_negative[i] + num_false_negative/num_trials
bootstrap_false_positive[i] = bootstrap_false_positive[i] + num_false_positive/num_trials
}
bootstrap_false_negative
bootstrap_false_positive
bootstrap_false_negative = vector(mode = "numeric", length = num_tests)
bootstrap_false_positive = vector(mode = "numeric", length = num_tests)
for (i in 1:num_tests) {
num_false_negative = 0
num_false_positive = 0
for (j in 1:num_trials) {
bootstrap_false_negative[i] = bootstrap_false_negative[i] + 3 - sum(target_indices %in% bootstrap_results[[i]][[j]])
bootstrap_false_positive[i] = bootstrap_false_positive[i] + length(bootstrap_results[[i]][[j]])-num_false_negative+3
}
}
bootstrap_false_negative
bootstrap_false_positive
bootstrap_results[[5]]
bootstrap_false_negative = vector(mode = "numeric", length = num_tests)
bootstrap_false_positive = vector(mode = "numeric", length = num_tests)
for (i in 1:num_tests) {
num_false_negative = 0
num_false_positive = 0
for (j in 1:num_trials) {
bootstrap_false_negative[i] = bootstrap_false_negative[i] + 3 - sum(target_indices %in% bootstrap_results[[i]][[j]])
bootstrap_false_positive[i] = bootstrap_false_positive[i] + length(bootstrap_results[[i]][[j]])-3+num_false_negative
}
}
bootstrap_false_positive
bootstrap_false_negative
bootstrap_false_negative = vector(mode = "numeric", length = num_tests)
bootstrap_false_positive = vector(mode = "numeric", length = num_tests)
for (i in 1:num_tests) {
num_false_negative = 0
num_false_positive = 0
for (j in 1:num_trials) {
bootstrap_false_negative[i] = bootstrap_false_negative[i] + 3 - sum(target_indices %in% bootstrap_results[[i]][[j]])
bootstrap_false_positive[i] = bootstrap_false_positive[i] + length(bootstrap_results[[i]][[j]]) - 3 + sum(target_indices %in% bootstrap_results[[i]][[j]])
}
}
bootstrap_false_negative
bootstrap_false_positive
bootstrap_results
bootstrap_false_negative = vector(mode = "numeric", length = num_tests)
bootstrap_false_positive = vector(mode = "numeric", length = num_tests)
for (i in 1:num_tests) {
num_false_negative = 0
num_false_positive = 0
for (j in 1:num_trials) {
bootstrap_false_negative[i] = bootstrap_false_negative[i] + 3 - sum(target_indices %in% bootstrap_results[[i]][[j]])
bootstrap_false_positive[i] = bootstrap_false_positive[i] + length(bootstrap_results[[i]][[j]]) - sum(target_indices %in% bootstrap_results[[i]][[j]])
}
}
bootstrap_false_positive
bootstrap+false_negative
bootstrap_false_negative
source("central_DP_SQ.R")
bootstrap_false_positive
bootstrap_false_negative
source("central_DP_SQ.R")
bootstrap_false_negative
bootstrap_false_positive
bootstrap_results
bootstrap_indices
data[c(1, 1, 2),]
a = data[c(1, 1, 2),]
a[1]
a[1,]
a[2,]
a[3,]
source("central_DP_SQ.R")
source("central_DP_SQ.R")
log(3)
source("central_DP_SQ.R")
bootstrap_false_negative
bootstrap_false_positive
source("local_DP_SQ.R")
source("local_DP_SQ.R")
bootstrap_false_positive
bootstrap_false_negative
bootstrap_results
n = 100000
t = qnorm(0.1^(1/d), mean = (n/(1+exp(epsilon/d))), sd = sqrt(n*exp(epsilon/d)/(1+exp(epsilon/d))^2))/n
t
n = 1000000
t = qnorm(0.1^(1/d), mean = (n/(1+exp(epsilon/d))), sd = sqrt(n*exp(epsilon/d)/(1+exp(epsilon/d))^2))/n
t
source("central_DP_SQ.R")
data[[1]]
source("central_DP_SQ.R")
bootstrap_results
source("test_for_correct_indices.R")
probs
source("test_for_correct_indices.R")
source("test_for_correct_indices.R")
probs
which(probs = 0)
which(probs == 0)
source("central_DP_SQ.R")
source("central_DP_SQ.R")
bootstrap_false-positive
bootstrap_false_positive
bootstrap_false_negative
bootstrap_false_negative = vector(mode = "numeric", length = num_tests)
bootstrap_false_positive = vector(mode = "numeric", length = num_tests)
for (i in 1:num_tests) {
for (j in 1:num_trials) {
bootstrap_false_negative[i] = bootstrap_false_negative[i] + 5 - sum(target_indices %in% bootstrap_results[[i]][[j]])
bootstrap_false_positive[i] = bootstrap_false_positive[i] + length(bootstrap_results[[i]][[j]]) - sum(target_indices %in% bootstrap_results[[i]][[j]])
}
}
bootstrap_false_positive
bootstrap_false_negative
bootstrap_results
bootstrap_false_negative
bootstrap_false_positive
source("central_DP_SQ.R")
source("central_DP_SQ.R")
bootstrap_false_negative
bootstrap_false_positive
source("local_DP_SQ.R")
bootstrap_false_negative
bootstrap_false_positive
source("local_DP_SQ.R")
bootstrap_false_negative
bootstrap_false_positive

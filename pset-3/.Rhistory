bins <- floor(1):ceiling(D)
nbins <- length(bins)
t = 0.05*n
x.clipped <- clip(x, 1, D)
sensitiveValue <- quantile(x, t/n)
quality <- rep(NA, nbins)
for(i in 1:length(quality)){
quality[i] <- (n - abs(t-sum(x.clipped<=bins[i])))/2
}
likelihoods <- exp(epsilon * quality) / 2
probabilities <- likelihoods/sum(likelihoods)
flag <- runif(n=1, min=0, max=1) < cumsum(probabilities) # See also rmultinom()
DPrelease <- min(bins[flag])
sensitiveValue
DPrelease
x.clipped
length(which(x.clipped == 1))
n
t
which(flag)
which(1-flag)
flag
which.NA(flag)
?which
probabilities
quality
epsilon*quality[1]
exp(epsilon*quality[1])
t_05 = percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)$release
t_05
percentileRelease <- function(x, t, lower, upper, nbins=0, epsilon){
n <- length(x)
if(nbins==0){
bins <- floor(lower):ceiling(upper)    # For integers, this is just lower:upper
nbins <- length(bins)
}
x.clipped <- clip(x, lower, upper)
sensitiveValue <- quantile(x, t/n)
quality <- rep(NA, nbins)
for(i in 1:length(quality)){
quality[i] <- (1 - abs(t-sum(x.clipped<=bins[i]))/n)/2
}
likelihoods <- exp(epsilon * quality) / 2
probabilities <- likelihoods/sum(likelihoods)
flag <- runif(n=1, min=0, max=1) < cumsum(probabilities) # See also rmultinom()
DPrelease <- min(bins[flag])
return(list(release=DPrelease, true=sensitiveValue))
}
t_05 = percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)$release
t_05
quantil(x.clipped, 0.5)
quantile(x.clipped, 0.5)
quantile(x.clipped, 0.9)
quantile(x.clipped, 0.99)
source('problem 1-d.R')
temp
true_mean
source('problem 1-d.R')
source('problem 1-d.R')
true_mean
temp
source('problem 1-d.R')
temp
true_mean
source('problem 1-d.R')
temp
true_mean
quantile(x, 0.05)
quantile(x, 0.95)
source('problem 1-d.R')
source('problem 1-d.R')
temp
source('problem 1-d.R')
temp
x = my_data[[toString(pums_list[1])]]
n = length(x)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease <- function(x, t, lower, upper, nbins=0, epsilon){
n <- length(x)
if(nbins==0){
bins <- floor(lower):ceiling(upper)    # For integers, this is just lower:upper
nbins <- length(bins)
}
x.clipped <- clip(x, lower, upper)
sensitiveValue <- quantile(x, t/n)
quality <- rep(NA, nbins)
for(i in 1:length(quality)){
quality[i] <- (n - abs(t-sum(x.clipped<=bins[i])))/2
}
likelihoods <- exp(epsilon * quality) / 2
probabilities <- likelihoods/sum(likelihoods)
flag <- runif(n=1, min=0, max=1) < cumsum(probabilities) # See also rmultinom()
DPrelease <- min(bins[flag])
return(list(release=DPrelease, true=sensitiveValue))
}
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
source('problem 1-f.R')
source('problem 1-f.R')
source('problem 1-f.R')
x
t_05
t_95
seq(0, 1000000, 1000)
seq(0, 1000000, 1000000/999)
source('problem 1-f.R')
source('problem 1-f.R')
t_05
t_95
x
x = my_data[[toString(pums_list[i])]]
n = length(x0)
n = length(x)
lower = 0
upper = D
nbins = 1000
t = 0.05
n <- length(x)
if(nbins==0){
bins <- floor(lower):ceiling(upper)    # For integers, this is just lower:upper
nbins <- length(bins)
} else {
bins <- seq(floor(lower),ceiling(upper), by = (upper-lower)/(nbins-1))
}
x.clipped <- clip(x, lower, upper)
sensitiveValue <- quantile(x, t/n)
quality <- rep(NA, nbins)
for(i in 1:length(quality)){
quality[i] <- (n - abs(t-sum(x.clipped<=bins[i])))/2
}
likelihoods <- exp(epsilon * quality) / 2
probabilities <- likelihoods/sum(likelihoods)
probabilities
quality
n
x
x = my_data[[toString(pums_list[1])]]
n = length(x)
t = 0.05*n
n <- length(x)
if(nbins==0){
bins <- floor(lower):ceiling(upper)    # For integers, this is just lower:upper
nbins <- length(bins)
} else {
bins <- seq(floor(lower),ceiling(upper), by = (upper-lower)/(nbins-1))
}
x.clipped <- clip(x, lower, upper)
sensitiveValue <- quantile(x, t/n)
quality <- rep(NA, nbins)
for(i in 1:length(quality)){
quality[i] <- (n - abs(t-sum(x.clipped<=bins[i])))/2
}
likelihoods <- exp(epsilon * quality) / 2
probabilities <- likelihoods/sum(likelihoods)
probabilities
quality
x = matrix(nrow = n, ncol = 2)
for (i in 1:n) {
puma = PUMSdata[i,2]
income = PUMSdata[i,6]
x[i,1] = puma
x[i,2] = income
}
values(x[,2])
unique(x[,2])
length(unique(x[,2]))
nbins = 1000000
n <- length(x)
if(nbins==0){
bins <- floor(lower):ceiling(upper)    # For integers, this is just lower:upper
nbins <- length(bins)
} else {
bins <- seq(floor(lower),ceiling(upper), by = (upper-lower)/(nbins-1))
}
x.clipped <- clip(x, lower, upper)
sensitiveValue <- quantile(x, t/n)
quality <- rep(NA, nbins)
for(i in 1:length(quality)){
quality[i] <- (n - abs(t-sum(x.clipped<=bins[i])))/2
}
nbins = 0
n <- length(x)
if(nbins==0){
bins <- floor(lower):ceiling(upper)    # For integers, this is just lower:upper
nbins <- length(bins)
} else {
bins <- seq(floor(lower),ceiling(upper), by = (upper-lower)/(nbins-1))
}
x.clipped <- clip(x, lower, upper)
sensitiveValue <- quantile(x, t/n)
quality <- rep(NA, nbins)
for(i in 1:length(quality)){
quality[i] <- (n - abs(t-sum(x.clipped<=bins[i])))/2
}
likelihoods <- exp(epsilon * quality) / 2
probabilities <- likelihoods/sum(likelihoods)
quality
likelihoods
probabilities
flag
DPrelease
source('problem 1-d.R')
x = my_data[[toString(pums_list[1])]]
n = length(x)
percentileRelease(x = x, t = .95*n, lower = 0, upper = D, nbins = 1000, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, nbins = 1000, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .95*n, lower = 0, upper = D, epsilon = epsilon)
x
D = 1000000
percentileRelease(x = x, t = .95*n, lower = 0, upper = D, epsilon = epsilon)
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, epsilon = epsilon)
n
length(x)
percentileRelease <- function(x, t, lower, upper, nbins=0, epsilon){
n <- length(x)
if(nbins==0){
bins <- floor(lower):ceiling(upper)    # For integers, this is just lower:upper
nbins <- length(bins)
} else {
bins <- seq(floor(lower),ceiling(upper), by = (upper-lower)/(nbins-1))
}
x.clipped <- clip(x, lower, upper)
sensitiveValue <- quantile(x, t/n)
quality <- rep(NA, nbins)
for(i in 1:length(quality)){
quality[i] <- (n - abs(t-sum(x.clipped<=bins[i])))/2
}
likelihoods <- exp(epsilon * quality) / 2
probabilities <- likelihoods/sum(likelihoods)
flag <- runif(n=1, min=0, max=1) < cumsum(probabilities) # See also rmultinom()
DPrelease <- min(bins[flag])
return(list(release=DPrelease, true=sensitiveValue))
}
percentileRelease(x = x, t = .05*n, lower = 0, upper = D, nbins = 1000, epsilon = epsilon)
percentileRelease(x = x, t = .95*n, lower = 0, upper = D, nbins = 1000, epsilon = epsilon)
source('problem 1-f.R')
source('problem 1-f.R')
?vapply
releases = vapply(1:num_trials, get_releases, FUN.VALUE = matrix(nrow = num_pums, ncol = 2))
releases = lapply(1:num_trials, get_releases)
releases[1]
releases[[1]]
releases[[2]]
releases[[10]]
releases[[11]]
source('problem 1-f.R')
source('problem 1-f.R')
min(release[,1])
min(release[[1]][,1])
releases[[1]]
releases[[1]][,1]
min(releases[[1]][,1])
min(releases[[1]][,2])
min(releases[[2]][,1])
min(releases[[2]][,2])
mean(my_data)
mean(x[,2])
mean(releases[[1]][,1])
mean(releases[[1]][,2])
releases[,1]
?median
pums_quartiles_laplace = matrix(nrow = num_pums, ncol = 5)
for (i in 1:num_pums) {
temp_vec = vector(mode = "numeric", length = num_trials)
for (j in 1:num_trials) {
temp_vec[j] = releases[[j]][i,1]
}
pums_quartiles_laplace[i,1] = min(temp_vec)
pums_quartiles_laplace[i,2] = quartile(temp_vec, 0.25)
pums_quartiles_laplace[i,3] = median(temp_vec)
pums_quartiles_laplace[i,4] = quartile(temp_vec, 0.75)
pums_quartiles_laplace[i,5] = max(temp_vec)
}
pums_quartiles_trim = matrix(nrow = num_pums, ncol = 5)
for (i in 1:num_pums) {
temp_vec = vector(mode = "numeric", length = num_trials)
for (j in 1:num_trials) {
temp_vec[j] = releases[[j]][i,2]
}
pums_quartiles_trim[i,1] = min(temp_vec)
pums_quartiles_trim[i,2] = quartile(temp_vec, 0.25)
pums_quartiles_trim[i,3] = median(temp_vec)
pums_quartiles_trim[i,4] = quartile(temp_vec, 0.75)
pums_quartiles_trim[i,5] = max(temp_vec)
}
pums_quartiles_laplace = matrix(nrow = num_pums, ncol = 5)
for (i in 1:num_pums) {
temp_vec = vector(mode = "numeric", length = num_trials)
for (j in 1:num_trials) {
temp_vec[j] = releases[[j]][i,1]
}
pums_quartiles_laplace[i,1] = min(temp_vec)
pums_quartiles_laplace[i,2] = quantile(temp_vec, 0.25)
pums_quartiles_laplace[i,3] = median(temp_vec)
pums_quartiles_laplace[i,4] = quantile(temp_vec, 0.75)
pums_quartiles_laplace[i,5] = max(temp_vec)
}
pums_quartiles_trim = matrix(nrow = num_pums, ncol = 5)
for (i in 1:num_pums) {
temp_vec = vector(mode = "numeric", length = num_trials)
for (j in 1:num_trials) {
temp_vec[j] = releases[[j]][i,2]
}
pums_quartiles_trim[i,1] = min(temp_vec)
pums_quartiles_trim[i,2] = quantile(temp_vec, 0.25)
pums_quartiles_trim[i,3] = median(temp_vec)
pums_quartiles_trim[i,4] = quantile(temp_vec, 0.75)
pums_quartiles_trim[i,5] = max(temp_vec)
}
pums_quartiles_trim
source('problem 1-f.R')
install.packages(sfsmisc)
install.packages('sfsmisc')
library(sfsmisc)
?boxplot.matrix( )
boxplot.matrix(pums_quartiles_laplace)
?boxplot.matrix( )
boxplot.matrix(pums_quartiles_laplace, use.cols = FALSE)
laplace_df = data.frame(pums_quartiles_laplace)
laplace_df
boxplot(laplace_df)
?data.frame
t(pums_quartiles_laplace)
laplace_df = data.frame(t(pums_quartiles_laplace))
boxplot(laplace_df)
?boxplot
boxplot(laplace_df, range = inf)
inf
Inf
boxplot(laplace_df, range = Inf)
boxplot(laplace_df, xlab = "PUMA", ylab = "log income" range = Inf, log = TRUE)
boxplot(laplace_df, xlab = "PUMA", ylab = "log income", range = Inf, log = TRUE)
boxplot(laplace_df, xlab = "PUMA", ylab = "log income", range = Inf, log = 'x')
boxplot(laplace_df, xlab = "PUMA", ylab = "log income", range = Inf, log = 'y')
boxplot(laplace_df, xlab = "PUMA", ylab = "income", range = Inf)
par(mfrow=c(2,1))
laplace_df = data.frame(t(pums_quartiles_laplace))
boxplot(laplace_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-20000,150000), range = Inf)
trim_df = data.frame(t(pums_quartiles_laplace))
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-20000,150000), range = Inf)
boxplot(laplace_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-20000,150000), range = Inf)
par(mfrow=c(1,1))
laplace_df = data.frame(t(pums_quartiles_laplace))
boxplot(laplace_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-20000,150000), range = Inf)
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-20000,150000), range = Inf)
trim_df = data.frame(t(pums_quartiles_trim))
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-20000,150000), range = Inf)
trim_df = data.frame(t(pums_quartiles_trim))
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-50000,150000), range = Inf)
laplace_df = data.frame(t(pums_quartiles_laplace))
boxplot(laplace_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-50000,150000), range = Inf)
dev.copy2pdf(file="laplace-boxplot.pdf")
trim_df = data.frame(t(pums_quartiles_trim))
boxplot(trim_df, xlab = "PUMA", ylab = "income", xlim = c(1,52), ylim = c(-50000,150000), range = Inf)
dev.copy2pdf(file="trim-boxplot.pdf")
source('problem 3.R')
?rlaplace
source('problem 3.R')
out.1 <- integerHistogramRelease(x=data$y, lower=1, upper=1000000, epsilon=0.5)
par(mfcol=c(1,1))
showHist(out.1, main="Integer Histogram")
dev.copy2pdf(file="./figs/integerHistogramRelease.pdf")
source('problem 3.R')
out.1 <- integerHistogramRelease(x=data.y, lower=1, upper=1000000, epsilon=0.5)
#data1 <- bootstrap(data, n=200)
out.1 <- integerHistogramRelease(x=data.y, lower=0, upper=1000000, epsilon=0.5)
source('problem 3.R')
out.1$true
out.t$release
out.1$release
max(out.1$release)
data.y
out.1$true
length(data.y)
out.1$cookb
out.1$cookbook
integerHistogramRelease <- function(x, lower, upper, nbins=0, epsilon){
n <- length(x)
if(nbins==0){
lower <- floor(lower)
upper <- ceiling(upper)
bins <- lower:upper
nbins <- length(bins)
} else {
lower <- floor(lower)
upper <- ceiling(upper)
bins <- seq(lower,upper, by = (upper-lower)/(nbins-1))
}
x.clipped <- clip(x=x, lower=lower, upper=upper)
sensitivity <- 2
scale <- sensitivity / epsilon
sensitiveValue <- DPrelease <- rep(NA,nbins)
for(i in 1:length(bins)){
sensitiveValue[i] <- sum(x.clipped==bins[i])
DPrelease[i] <- sensitiveValue[i] + rlaplace(n = 1, m=0, s=scale)
}
return(list(release=DPrelease, true=sensitiveValue, codebook=bins))
}
integerHistogramRelease(x=data.y, lower=0, upper=1000000, nbins = 1000, epsilon=0.5)
integerHistogramRelease <- function(x, lower, upper, nbins=0, epsilon){
n <- length(x)
if(nbins==0){
lower <- floor(lower)
upper <- ceiling(upper)
bins <- lower:upper
nbins <- length(bins)
} else {
lower <- floor(lower)
upper <- ceiling(upper)
bins <- seq(lower,upper, by = (upper-lower)/(nbins-1))
}
x.clipped <- clip(x=x, lower=lower, upper=upper)
sensitivity <- 2
scale <- sensitivity / epsilon
sensitiveValue <- DPrelease <- rep(NA,nbins)
for(i in 1:length(bins)){
if (i != length(bins)) {
sensitiveValue[i] <- sum((x.clipped < bins[i+1] && x.clipped >= bins[i]))
} else {
sensitiveValue[i] <- sum((x.clipped==bins[i]))
}
DPrelease[i] <- sensitiveValue[i] + rlaplace(n = 1, m=0, s=scale)
}
return(list(release=DPrelease, true=sensitiveValue, codebook=bins))
}
integerHistogramRelease(x=data.y, lower=0, upper=1000000, nbins = 1000, epsilon=0.5)
clipped <- clip(data.y, 0, 1000000)
sum((clipped < bins[i+1] && clipped >= bins[i]))
clipped < bins[i+1]
i
a <- clipped < bins[i+1]
b <- clipped >= bins[i]
length(b)
length(a)
a && b
a + b
sum(a+b)-length(a)
bins[i+1]
bins
bins <- out.1$codebook
a <- clipped < bins[i+1]
b <- clipped >= bins[i]
sum(a)
sum(b)
a+b-length(a)
sum(a+b)-length(a)
source('problem 3.R')
out.1$codebook
out.1$true
data.y <- log(PUMSdata$income)
?log
log(0)
data.y
max(data.y)
data.y <- PUMSdata$income
max(data.y)
log(1000000)
source('problem 3.R')
source('problem 3.R')
out.1
sum(out.1$true)
length(data.y)
?array
array(dim = c(1,2,3))
PUMSdata$age
source('problem 3.R')
max(PUMSdata$educ)
max(PUMSdata$age)
source('problem 3.R')
source('problem 3.R')
out.1
dim(out.1$true)
max(out.1$true)
out.1$release
private_counts <- out.1$release
private_probabilities <- normalize(private_counts)
true_counts <- out.1$true
private_counts <- normalize(true_counts)
private_counts <- out.1$release
private_probabilities <- normalize(private_counts)
true_counts <- out.1$true
private_counts <- normalize(true_counts)
normalize <- function(x){
x[x<0] <- 0
x <- x/sum(x)
return(x)
}
private_counts <- out.1$release
private_probabilities <- normalize(private_counts)
true_counts <- out.1$true
private_counts <- normalize(true_counts)
private_counts <- out.1$release
private_probabilities <- normalize(private_counts)
true_counts <- out.1$true
true_probabilities <- normalize(true_counts)

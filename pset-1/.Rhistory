vector(integer)
vector('integer')
vector('integer', 10)
vector('float', 10)
vector('num', 10)
vector('numbr', 10)
vector('number', 10)
vector('numeric', 10)
vector('numeric', 10)
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
vector('numeric', (num_sigmas, num_samples))
source ('reconstruction-attack.R')
avg1.frac
true1.frac
source ('reconstruction-attack.R')
true1.frac
a = matrix(10,10)
a[10][10]
a[10][11]
a[0]
a[1]
source ('reconstruction-attack.R')
true1.frac
true1[1][1]
true1.frac[1][1]
true1.frac[1][2]
true1.frac[2][]
true1.frac[2][1]
true1.frac[2]
true1.frac[20]
true1.frac[3]
true1.frac[3,]
true1.frac[3,3]
source ('reconstruction-attack.R')
?plot
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
plot(sigmas, avg1.frac, ylim = c(0,1), col = "red")
lines(avg0.frac, col = "green")
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
true0.frac
true1.frac
avg1.frac
true1.frac[100]
true1.frac[50]
source ('reconstruction-attack.R')
true1.frac[50,]
true1.frac[100,,]
true1.frac[100,]
avg1.frac
true1.frac[10,]
true1.frac
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
true1.frac
source ('reconstruction-attack.R')
true1.frac[15,]
mean(true1.frac[15,])
avg1.frac[15]
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
source ('reconstruction-attack.R')
getwd()
source("rounding-attack.R")
source("rounding-attack.R")
avg1.frac
round_to
round_to
source("rounding-attack.R")
source("rounding-attack.R")
source("rounding-attack.R")
true1.frac
true0.frac
avg1.frac
avg0.frac
?sample
source("subsampling-attack.R")
source("subsampling-attack.R")
source("subsampling-attack.R")
length(sensitiveData)
1:100
subsampleSizes
source("subsampling-attack.R")
warnings()
source("subsampling-attack.R")
warnings()
estimates
sensitiveData
sensitiveData[0]
sensitiveData
source("subsampling-attack.R")
source("subsampling-attack.R")
source("subsampling-attack.R")
source("subsampling-attack.R")
source("subsampling-attack.R")
print(3)
source("subsampling-attack.R")
source("subsampling-attack.R")
source("subsampling-attack.R")
avg1.frac
estimates
source("subsampling-attack.R")
?sample
source("subsampling-attack.R")
subsetIndex
subsetIndex
source("subsampling-attack.R")
source("subsampling-attack.R")
source("subsampling-attack.R")
source("subsampling-attack.R")
source("subsampling-attack.R")
subset
index <- sample(1:length(data), n)
index <- sample(1:length(sensitiveData), n)
index <- sample(1:length(sensitiveData), q.size)
sum(sensitiveData[index])
subsetIndex = intersect(subsampleIndex, index)
sum(sensitiveData[subsetIndex])
source("subsampling-attack.R")
source("subsampling-attack.R")
source("subsampling-attack.R")
source("rounding-attack.R")
source("rounding-attack.R")
source("rounding-attack.R")
source("rounding-attack.R")
source("rounding-attack.R")
avg.frac
true1.frac
true0.frac
source("rounding-attack.R")
sensiTivedata
sensitiveData
true0.frac
true1.frac
source("reconstruction-attack.R")
source("reconstruction-attack.R")
source("reconstruction-attack.R")
source("reconstruction-attack.R")
source("reconstruction-attack.R")
?insert
?sort
num_filling = 9
avg.frac = vector('numeric', num_sigmas + num_filling)
count = 0
for (j in 1:num_sigmas) {
avg.frac[j + count] = mean(true.frac[j])
if (j > 1 && j < num_filling + 1) {
avg.frac[j+count+1] = (avg.frac[j+count] + mean(true.frac[j+1]))/2
count = count+1
}
}
inserted_values = c(1.5, 2.5, 3.5, 4.5, 6.5, 7.5, 8.5, 9.5)
test_sigmas = sort(c(test_sigmas, inserted_values))
plot(test_sigmas, avg.frac, xlab = "sigma values", ylab = "fraction correct", ylim = c(0,1), col = "red")
#lines(test_sigmas, avg0.frac, col = "green")
#legend(1, 0.4, legend = c("ones correct", "zeros correct"), fill = c("red", "green"))
dev.copy2pdf(file="sigmaResults.pdf")
test_sigmas
length(test_sigmas)
length(avg.frac)
count
num_filling = 9
avg.frac = vector('numeric', num_sigmas + num_filling)
count = 0
for (j in 1:num_sigmas) {
avg.frac[j + count] = mean(true.frac[j])
if (j > 1 && j < num_filling + 1) {
avg.frac[j+count+1] = (avg.frac[j+count] + mean(true.frac[j+1]))/2
count = count+1
}
}
length(avg.frac)
avg.frac[109]
avg.frac[110]
num_filling = 9
avg.frac = vector('numeric', num_sigmas + num_filling-1)
count = 0
for (j in 1:num_sigmas) {
avg.frac[j + count] = mean(true.frac[j])
if (j > 1 && j < num_filling + 1) {
avg.frac[j+count+1] = (avg.frac[j+count] + mean(true.frac[j+1]))/2
count = count+1
}
}
inserted_values = c(1.5, 2.5, 3.5, 4.5, 6.5, 7.5, 8.5, 9.5)
test_sigmas = sort(c(test_sigmas, inserted_values))
plot(test_sigmas, avg.frac, xlab = "sigma values", ylab = "fraction correct", ylim = c(0,1), col = "red")
#lines(test_sigmas, avg0.frac, col = "green")
#legend(1, 0.4, legend = c("ones correct", "zeros correct"), fill = c("red", "green"))
dev.copy2pdf(file="sigmaResults.pdf")
length(test_sigmas)
source("reconstruction-attack.R")
avg.frac
source("reconstruction-attack.R")
length(avg.frac)
length(test_sigmas)
test_sigmas
test_sigmas = c(test_sigmas, 5.5)
test_sigmas = sort(test_sigmas)
plot(test_sigmas, avg.frac, xlab = "sigma values", ylab = "fraction correct", ylim = c(0,1), col = "red")
#lines(test_sigmas, avg0.frac, col = "green")
#legend(1, 0.4, legend = c("ones correct", "zeros correct"), fill = c("red", "green"))
dev.copy2pdf(file="sigmaResults.pdf")
source("reconstruction-attack.R")
source("reconstruction-attack.R")
source("reconstruction-attack.R")
source("rounding-attack.R")
source("rounding-attack.R")
source("rounding-attack.R")
source("reconstruction-attack.R")
source("subsampling-attack.R")
plot(subsampleSizes, avg.frac, xlab = "number rounded to", ylab = "fraction correct", ylim = c(0,1), col = "red")
#lines(test_sigmas, avg0.frac, col = "green")
#legend(1, 0.4, legend = c("ones correct", "zeros correct"), fill = c("red", "green"))
dev.copy2pdf(file="subsamplingResults.pdf")
source("subsampling-attack.R")
source("subsampling-attack.R")
source("subsampling-attack.R")
source("subsampling-attack.R")
source(membership-attack.R)
source('membership-attack.R')
source('subsampling-attack.R')
source('rounding-attack.R')
?shape
dim(pums)
dim(pums)[2]
sampleIndex
sort(sampleIndex)
r_nums <- sample(1:prime, dim(pums)[2], replace = TRUE)
prime = 137
r_nums <- sample(1:prime, dim(pums)[2], replace = TRUE)
pums[sampleIndex,]*r_nums
pums[,]*r_nums
pums[1,]*r_nums
pums[2,]*r_nums
pums[c(1,2),]*r_nums
r_nums
?matrix
?vector
3%2
3%%2
r_nums <- sample(1:prime, dim(pums)[2], replace = TRUE)
predicates <- vector(length = dim(pums[sampleIndex,])[1])
for (i in 1:dim(pums)[1]) {
predicates[i,] = (sum(pums[i,] * r_nums) && prime) && 2
}
index <- which(predicates == 1)
r_nums <- sample(1:prime, dim(pums)[2], replace = TRUE)
predicates <- vector(length = dim(pums[sampleIndex,])[1])
for (i in 1:dim(pums)[1]) {
predicates[i,] = (sum(pums[i,] * r_nums) %% prime) %% 2
}
index <- which(predicates == 1)
r_nums <- sample(1:prime, dim(pums)[2], replace = TRUE)
predicates <- vector(length = dim(pums[sampleIndex,])[1])
for (i in 1:dim(pums)[1]) {
predicates[i] = (sum(pums[i,] * r_nums) %% prime) %% 2
}
index <- which(predicates == 1)
index
length(index)
source(reconstruction-attack.R)
source("reconstruction-attack.R")
r_nums <- sample(1:prime, dim(pums)[2], replace = TRUE)
predicates <- vector(length = dim(pums[sampleIndex,])[1])
for (i in 1:dim(pums)[1]) {
predicates[i] = (sum(pums[i,] * r_nums) %% prime) %% 2
}
index <- which(predicates == 1)
source("reconstruction-attack.R")
?lapply
compute_predicate <- function(vec) {
return((sum(vec * r_nums) %% prime) %% 2)
}
r_nums <- sample(1:prime, dim(pums)[2])
predicates <- lapply(pums[sampleIndex,], compute_predicate)
warnings()
r_nums <- sample(1:prime, dim(pums)[2])
predicates <- lapply(pums[sampleIndex,], compute_predicate)
as.list(pums)
?as.list
pums
as.matrix(pums)
a = as.matrix(pums)
as.list(a)
as.vector(pums)
as.list(as.vector(pums))
?list
?append
pums_list <- list()
for (i in 1:dim(pums[2])) {
append(pums_list, pums[,i])
}
pums_list <- list()
for (i in 1:dim(pums)[2]) {
append(pums_list, pums[,i])
}
pums_list
pums_list <- list()
for (i in 1:dim(pums)[2]) {
pums_list = append(pums_list, pums[,i])
}
pums_list
pums_list <- list()
for (i in 1:dim(pums)[2]) {
pums_list = c(pums_list, pums[,i])
}
pums_list
pums_list <- list()
for (i in 1:dim(pums)[2]) {
pums_list = list.append(pums_list, pums[,i])
}
install.packages("rlist")
library("rlist")
pums_list <- list()
for (i in 1:dim(pums)[2]) {
pums_list = list.append(pums_list, pums[,i])
}
pums_list
pums[,1]
pums[,2]
pums[,3]
pums[,20]
pums_list <- list()
for (i in 1:dim(pums)[1]) {
pums_list = list.append(pums_list, pums[i,])
}
pums-list
pums_list
r_nums <- sample(1:prime, dim(pums)[2])
predicates <- lapply(pums_list, compute_predicate)
predicates
source("reconstruction-attack.R")
source("reconstruction-attack.R")
r_nums
source("membership-attack.R")
source("membership-attack.R")
pums <- read.csv(file="../../cs208/data/FultonPUMS5full.csv")
source("membership-attack.R")
source("membership-attack.R")
population.prob
source("membership-attack.R")
source("membership-attack.R")
pouplation.prob
length(population.prob)
compute_predicate()
prime <- 137
compute_predicate()
compute_predicate()
?lapply
?lapply
compute_predicate()
compute_predicate()
compute_predicate_value <- function(vec, r_nums=NA) {
return((sum(vec * r_nums) %% prime) %% 2)
}
#compute a vector of predicates for each member of pums
compute_predicate <- function() {
r_nums <- sample(1:prime, dim(pums)[2])
predicates <- lapply(pums_list, compute_predicate_value, r_nums)
return(predicates)
}
compute_predicate()
pums_list
source("membership-attack.R")
compute_predicate()
source("membership-attack.R")
source("membership-attack.R")
population.prob
as.vector(population.prob)
c(population.prob)
?vector
compute_predicate <- function() {
r_nums <- sample(1:prime, dim(pums)[2])
predicates <- vapply(pums_list, FUN = compute_predicate_value, FUN.VALUE = vector(mode = "integer"), r_nums)
return(predicates)
}
compute_predicate()
compute_predicate <- function() {
r_nums <- sample(1:prime, dim(pums)[2])
predicates <- vapply(pums_list, FUN = compute_predicate_value, FUN.VALUE = vector(mode = "integer", length = 100), r_nums)
return(predicates)
}
compute_predicate()
compute_predicate <- function() {
r_nums <- sample(1:prime, dim(pums)[2])
predicates <- vapply(pums_list, FUN = compute_predicate_value, FUN.VALUE = vector(mode = "integer", length = 1), r_nums)
return(predicates)
}
population.prob <- as.vector(compute_predicate())
?double
compute_predicate <- function() {
r_nums <- sample(1:prime, dim(pums)[2])
predicates <- lapply(pums_list, FUN = compute_predicate_value, r_nums)
return(predicates)
}
population.prob <- as.single(compute_predicate())
population.mean <- 2*(population.prob-0.5)
population.prob
?as.vector
population.prob <- as.vector(as.single(compute_predicate()), mode="integer")
population.mean <- 2*(population.prob-0.5)
population.prob
population.mean
source("membership-attack.R")
?copy2pdf
?dev.copy2pdf
source("membership-attack.R")
source("membership-attack.R")
source("membership-attack.R")
source("membership-attack.R")
sample
alice
nullAlice
test.alice.Homer
test.alice.Dword
test.alice.Dwork
history
nullDist.Dwork
population.prob
dim(pums)
source("membership-attack.R")
source("membership-attack.R")
population.prob
temp1 = runif(n=k.attributes, min=0, max=1)
temp2 = 2*(population.prob-0.5)
temp2
dim(temp1)
dim(temp2)
temp1
length(temp1)
temp2
source("membership-attack.R")
/vector
?vector
source("membership-attack.R")
source("membership-attack.R")
source("membership-attack.R")
par(mfrow=c(2,2))
showdist(history[,2], criticalvalue=nullDist.Homer$criticalVal, main="Homer Alice", bw=0.5)
showdist(history[,4], criticalvalue=nullDist.Homer$criticalVal, main="Homer Null", bw=0.5)
Tvalue <- sqrt(8*k.attributes * log(1/myalpha))
#showdist(history[,6], criticalvalue=nullDist.Dwork$criticalVal, main="Dwork Alice", bw=0.5)
#abline(v=Tvalue, col="red", lty=2)
#showdist(history[,8], criticalvalue=nullDist.Dwork$criticalVal, main="Dwork Null", bw=0.5)
#abline(v=Tvalue, col="red", lty=2)
dev.copy2pdf(file="membershipAttack.pdf")
showdist(history[,2], criticalvalue=nullDist.Homer$criticalVal, main="Homer Alice", bw=0.5)
showdist(history[,4], criticalvalue=nullDist.Homer$criticalVal, main="Homer Null", bw=0.5)
Tvalue <- sqrt(8*k.attributes * log(1/myalpha))
par(mfrow=1)
showdist(history[,2], criticalvalue=nullDist.Homer$criticalVal, main="Homer Alice", bw=0.5)
showdist(history[,4], criticalvalue=nullDist.Homer$criticalVal, main="Homer Null", bw=0.5)
Tvalue <- sqrt(8*k.attributes * log(1/myalpha))
?showdist
nullDist.Homer
par(mfrow=1)
showdist(history[,2], criticalvalue=nullDist.Homer$criticalVal, main="Homer Alice", bw=1)
showdist(history[,4], criticalvalue=nullDist.Homer$criticalVal, main="Homer Null", bw=1)
Tvalue <- sqrt(8*k.attributes * log(1/myalpha))
par(mfrow=c(2,2))
showdist(history[,2], criticalvalue=nullDist.Homer$criticalVal, main="Homer Alice", bw=1)
showdist(history[,4], criticalvalue=nullDist.Homer$criticalVal, main="Homer Null", bw=1)
Tvalue <- sqrt(8*k.attributes * log(1/myalpha))
Tvalue
par(mfrow=c(2,1))
showdist(history[,2], criticalvalue=nullDist.Homer$criticalVal, main="Homer Alice", bw=1)
showdist(history[,4], criticalvalue=nullDist.Homer$criticalVal, main="Homer Null", bw=1)
Tvalue <- sqrt(8*k.attributes * log(1/myalpha))
par(mfrow=c(1,2))
showdist(history[,2], criticalvalue=nullDist.Homer$criticalVal, main="Homer Alice", bw=1)
showdist(history[,4], criticalvalue=nullDist.Homer$criticalVal, main="Homer Null", bw=1)
Tvalue <- sqrt(8*k.attributes * log(1/myalpha))
log(n)
n = 100
log(n)
source('membership-attack.R')
source('membership-attack.R')
source('membership-attack.R')
source('membership-attack.R')
source("membership-attack.")
source("membership-attack")
source("membership-attack.R")
source("membership-attack.R")
